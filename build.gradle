plugins {
  id 'java-library'
  id "org.javamodularity.moduleplugin"
  id 'eclipse'
  id 'distribution'
  id 'maven-publish'
  id "org.jetbrains.kotlin.jvm"
  id "org.jetbrains.kotlin.kapt"
  id "org.jetbrains.dokka"
  id "com.palantir.graal"
  id "com.hpe.kraal"
}

version = '0.0.0'

repositories {
  maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
  maven { url 'https://kotlin.bintray.com/kotlinx' }
  mavenCentral()
  jcenter()
  gradlePluginPortal()
}

class AlignmentRules implements ComponentMetadataRule {
  void execute(ComponentMetadataContext ctx) {
    ctx.details.with {
      if (id.group.startsWith("org.graalvm")) {
        belongsTo("org.graalvm:graalvm-virtual-platform:${id.version}")
      }
      if (id.group.startsWith("org.jetbrains.kotlin")) {
        belongsTo("org.jetbrains.kotlin:kotlin-bom:${id.version}", false)
      }
      if (id.group.startsWith("com.fasterxml.jackson")) {
        belongsTo("com.fasterxml.jackson:jackson-bom:${id.version}", false)
      }
    }
  }
}

dependencies {
  components.all(AlignmentRules)
  api enforcedPlatform("org.jetbrains.kotlin:kotlin-bom:${kotlinVersion}")
  api enforcedPlatform("org.graalvm:graalvm-virtual-platform:${graalVMVersion}")
  testImplementation platform("org.junit:junit-bom:${junit5Version}")
  implementation platform("com.fasterxml.jackson:jackson-bom:[2.10.3,2.10.4)")
  constraints {
    compileOnly "com.mageddo.nativeimage:reflection-config-generator:${reflConfGenVersion}"
    implementation "com.ibm.icu:icu4j:[66.1,)"
    implementation "org.abego.treelayout:org.abego.treelayout.core:[1.0.3,)"
    implementation "org.glassfish:javax.json:[1.1.4,)"
    implementation "org.antlr:antlr4-runtime:[4.8-1,)"
    implementation "org.parboiled:parboiled-java:${parboiledVersion}"
    implementation "org.parboiled:parboiled-core:${parboiledVersion}"
  }

  api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
  api "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
  implementation "org.parboiled:parboiled-java:${parboiledVersion}"
  api "org.graalvm.truffle:truffle-api:${graalVMVersion}"
  implementation "org.graalvm.sdk:graal-sdk:${graalVMVersion}"
  compileOnly "org.graalvm.truffle:truffle-dsl-processor:${graalVMVersion}"
  // annotationProcessor "org.graalvm.truffle:truffle-dsl-processor:${graalVMVersion}"
  kapt "org.graalvm.truffle:truffle-dsl-processor:${graalVMVersion}"
  compileOnly "com.mageddo.nativeimage:reflection-config-generator:${reflConfGenVersion}"
  // annotationProcessor "com.mageddo.nativeimage:reflection-config-generator:${reflConfGenVersion}"
  kapt "com.mageddo.nativeimage:reflection-config-generator:${reflConfGenVersion}"
  testImplementation "org.jetbrains.kotlin:kotlin-test:${kotlinVersion}"
  testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:${kotlinVersion}"
  testImplementation "org.graalvm.truffle:truffle-tck:${graalVMVersion}"
  testImplementation "org.junit.vintage:junit-vintage-engine:${junit5Version}"
  testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
  testImplementation "org.junit.jupiter:junit-jupiter-params:${junit5Version}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit5Version}"
}

java {
  // sourceCompatibility = JavaVersion.VERSION_11
  // targetCompatibility = JavaVersion.VERSION_11
  withJavadocJar()
  withSourcesJar()
}

modularity {
  standardJavaRelease 11
}

patchModules.config = [
  "parboiled.java=parboiled-core-${parboiledVersion}.jar".toString(),
]

test {
  useJUnitPlatform()
}

dokka {
  outputFormat = 'html'
  outputDirectory = "$docsDir/dokka"
}

compileKotlin {
  kotlinOptions {
    languageVersion = "1.4 (EXPERIMENTAL)"
    apiVersion = "1.4 (EXPERIMENTAL)"
    javaParameters = true
    jvmTarget = "11"
    freeCompilerArgs += [
      "-Xjvm-default=enable",
      "-Xstrict-java-nullability-assertions",
      "-Xassertions=jvm",
      "-Xemit-jvm-type-annotations",
      "-Xjsr305=strict",
      "-Xjsr305=under-migration:strict",
      "-Xmodule-path=${}".toString(),
    ]
  }
}

kapt {
  correctErrorTypes = true
  includeCompileClasspath = false
  javacOptions {
    option("--module-path", compileJava.classpath.asPath)
    option("--patch-module", "parboiled.java=parboiled-core-${parboiledVersion}.jar")
  }
}

graal {
  mainClass 'com.pthariensflame.truffle_dhall.shell.DhallMain'
  outputName 'truffle-dhall'
  graalVersion "${graalVMVersion}"
}

// Copied and modified from here: https://stackoverflow.com/questions/44266042/kotlin-setup-via-gradle-on-eclipse
// And also from here: https://github.com/eclipse/buildship/issues/620
eclipse {
  classpath {
    downloadSources = true
    downloadJavadoc = true
    //Adds the kotlin container to the classpath
    containers 'org.jetbrains.kotlin.core.KOTLIN_CONTAINER'
    //Fixes the right output path
    defaultOutputDir = file('bin')
    //Make all src folders output in the same output folder (default)
    file {
      beforeMerged {
        entries.each { source ->
          if ((source.kind == 'src' ||
               source.kind == 'con') ||
              (source.kind == 'lib' &&
               (source.path.endsWith("parboiled-java-${parboiledVersion}.jar") ||
                source.path.endsWith("kotlin-stdlib-jdk8-${kotlinVersion}.jar") ||
                source.path.endsWith("kotlin-reflect-${kotlinVersion}.jar") ||
                source.path.endsWith("kotlin-test-${kotlinVersion}.jar") ||
                source.path.endsWith("kotlin-test-junit5-${kotlinVersion}.jar") ||
                source.path.endsWith("graal-sdk-${graalVMVersion}.jar") ||
                source.path.endsWith("truffle-api-${graalVMVersion}.jar") ||
                source.path.endsWith("truffle-dsl-processor-${graalVMVersion}.jar") ||
                source.path.endsWith("truffle-api-${graalVMVersion}.jar") ||
                source.path.endsWith("junit-vintage-engine-${junit5Version}.jar") ||
                source.path.endsWith("junit-jupiter-api-${junit5Version}.jar") ||
                source.path.endsWith("junit-jupiter-params-${junit5Version.jar}") ||
                source.path.endsWith("junit-jupiter-engine-${junit5Version}.jar") ||
                source.path.endsWith("reflection-config-generator-${reflConfGenVersion}.jar")))
          ) {
            source.entryAttributes['module'] = 'true'
          }
        }
      }
      whenMerged {
        // use default Output for all source-folders. see also defaultOutputDir per project
        entries.each { source ->
          // only Source-folders in the project starting with '/' are project-references
          if (source.kind == 'src' && !source.path.startsWith('/')) {
            source.output = null
          }
        }
      }
    }
  }

  project {
    buildCommand 'org.jetbrains.kotlin.ui.kotlinBuilder'
    //Fixes the natures
    natures 'org.jetbrains.kotlin.core.kotlinNature', 'org.eclipse.jdt.core.javanature'
    //Links the kotlin_bin folder (generated class files)
    linkedResource name: 'kotlin_bin', type: '2', locationUri: "org.jetbrains.kotlin.core.filesystem:/${project.name}/kotlin_bin".toString()
    file {
      whenMerged{
        def kotlinPrefs = file("../${project.name}/.settings/org.jetbrains.kotlin.core.prefs".toString())
        def jdkHome = System.properties.'java.home'
        if(!(jdkHome)){
          throw new GradleException('No JDK home available for setting up Eclipse Kotlin plugin, setup env "java.home" or update this script.')
        }
        kotlinPrefs.write """\
          codeStyle/codeStyleId=KOTLIN_OFFICIAL
          jdkHome=${jdkHome.replaceAll("\\\\", "/")}
        """.stripIndent()
      }
    }
  }
}
